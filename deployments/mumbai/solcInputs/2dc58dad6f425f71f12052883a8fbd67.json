{
  "language": "Solidity",
  "sources": {
    "contracts/child/BaseChildTunnel.sol": {
      "content": "pragma solidity 0.6.8;\n\n\nimport {AccessControlMixin} from \"../common/Matic/AccessControlMixin.sol\";\n\n/**\n* @notice Mock child tunnel contract to receive and send message from L2\n*/\nabstract contract BaseChildTunnel is AccessControlMixin {\n    bytes32 public constant STATE_SYNCER_ROLE = keccak256(\"STATE_SYNCER_ROLE\");\n\n    // MessageTunnel on L1 will get data from this event\n    event MessageSent(bytes message);\n\n    constructor() internal {\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n      _setupRole(STATE_SYNCER_ROLE, 0x0000000000000000000000000000000000001001);\n      _setupContractId(\"ChildTunnel\");\n    }\n\n    /**\n     * @notice Receive state sync from matic contracts\n     * @dev This method will be called by Matic chain internally.\n     * This is executed without transaction using a system call.\n     */\n    function onStateReceive(uint256, bytes memory message) public only(STATE_SYNCER_ROLE) {\n        _processMessageFromRoot(message);\n    }\n\n    /**\n     * @notice Emit message that can be received on Root Tunnel\n     * @dev Call the internal function when need to emit message\n     * @param message bytes message that will be sent to Root Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToRoot(bytes memory message) internal {\n        emit MessageSent(message);\n    }\n\n    /**\n     * @notice Process message received from Root Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param message bytes message that was sent from Root Tunnel\n     */\n    function _processMessageFromRoot(bytes memory message) virtual internal;\n}"
    },
    "contracts/common/Matic/AccessControlMixin.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract AccessControlMixin is AccessControl {\n    string private _revertMsg;\n    function _setupContractId(string memory contractId) internal {\n        _revertMsg = string(abi.encodePacked(contractId, \": INSUFFICIENT_PERMISSIONS\"));\n    }\n\n    modifier only(bytes32 role) {\n        require(\n            hasRole(role, _msgSender()),\n            _revertMsg\n        );\n        _;\n    }\n}"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/child/ChildWithdrawalBatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport { IChildERC20 } from \"./interfaces/IChildERC20.sol\";\nimport { BaseChildTunnel } from \"./BaseChildTunnel.sol\";\nimport { DepositEncoder } from \"../common/DepositEncoder.sol\";\n\ncontract ChildWithdrawalBatcher is BaseChildTunnel {\n    using DepositEncoder for bytes32;\n\n    event Deposit(address indexed depositor, address indexed recipient, uint256 amount);\n    event Withdrawal(address indexed recipient, uint256 amount);\n    event BridgedWithdrawals(address indexed bridger, bytes withdrawalMessage, uint256 amount);\n\n    IChildERC20 public immutable withdrawalToken;\n\n    mapping(address => uint256) public balance;\n\n    // Safety parameters to prevent malicious bridging\n    uint256 public minWithdrawalAmount;\n    uint256 public maxWithdrawalRecipients;\n\n    /**\n     *\n     * @param _withdrawalToken - ERC20 token which this contract is batching withdrawals for\n     * @param _minWithdrawalAmount - The minimum number of tokens which must be included in a withdrawal\n     * @param _maxWithdrawalRecipients - The maximum number of recipients which can included in a single withdrawal\n     */\n    constructor(IChildERC20 _withdrawalToken, uint256 _minWithdrawalAmount, uint256 _maxWithdrawalRecipients) public {\n        withdrawalToken = _withdrawalToken;\n        minWithdrawalAmount = _minWithdrawalAmount;\n        maxWithdrawalRecipients = _maxWithdrawalRecipients;\n    }\n\n    /**\n     * Transfers user's funds to the contract to be included in a withdrawal to another account, increasing its balance\n     * @param recipient - address on root chain which will be able to claim funds\n     * @param amount - amount of funds to be deposited for recipient\n     */\n    function depositFor(address recipient, uint96 amount) public {\n        require(withdrawalToken.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\n        \n        balance[recipient] += amount;\n        emit Deposit(msg.sender, recipient, amount);\n    }\n\n    /**\n     * Withdraws from user's internal balance back to their account on Matic\n     * @param amount - amount of funds to be withdrawn for recipient\n     */\n    function withdraw(uint256 amount) external {\n        uint256 userBalance = balance[msg.sender];\n        require(userBalance >= amount, \"Insufficient balance for withdrawal\");\n        balance[msg.sender] =  userBalance - amount;\n        \n        require(withdrawalToken.transfer(msg.sender, amount), \"Token transfer failed\");\n        emit Withdrawal(msg.sender, amount);\n    }\n\n    /**\n     * Bundles a number of user's balances into a single withdrawal from Matic\n     * @dev Withdrawals are encoded by shifting the recipient address into the upper bytes of the bytes32 object.\n     *      This leaves 12 bytes to store the withdrawal amount in the lower bits.\n     *      e.g. A deposit of 100 (0x64) to the address 0xf35a15fa6dc1C11C8F242663fEa308Cd85688adA \n     *           results in 0xf35a15fa6dc1c11c8f242663fea308cd85688ada000000000000000000000064\n     *\n     *      This array is concatenated and passed to the RootWithdrawalBatcher on Ethereum to redistribute funds\n     * @param encodedWithdrawals - an array of bytes32 objects which each represent a withdrawal to a recipient's account on Ethereum\n     */\n    function bridgeWithdrawals(bytes32[] calldata encodedWithdrawals) external {\n        // Prevents exhausting gas limit on Ethereum by including many small withdrawals to different recipients\n        require(encodedWithdrawals.length <= maxWithdrawalRecipients, \"Too many recipients\");\n\n        uint256 totalWithdrawalAmount;\n        // Calculate amount of funds to be bridged for withdrawals\n        for (uint256 i; i < encodedWithdrawals.length; i++){\n            (address recipient, uint96 withdrawalAmount) = encodedWithdrawals[i].decodeDeposit();\n            totalWithdrawalAmount += withdrawalAmount;\n\n            // Enforce that full balance of recipient is used\n            // This prevents attacks by malicious bridgers fragmenting users' funds over many withdrawals\n            require(balance[recipient] == withdrawalAmount, \"Must withdraw all of user's balance\");\n            balance[recipient] = 0;\n        }\n\n        // Prevents gas costs of claiming withdrawals outweighing withdrawal value\n        require(totalWithdrawalAmount >= minWithdrawalAmount, \"Withdrawal below minimum amount\");\n\n        // Withdraw the amount of funds needed for newly processed withdrawals\n        withdrawalToken.withdraw(totalWithdrawalAmount);\n\n        // Send a message to contract on Ethereum to allow recipients to withdraw\n        bytes memory withdrawalMessage = abi.encodePacked(encodedWithdrawals);\n        _sendMessageToRoot(withdrawalMessage);\n\n        emit BridgedWithdrawals(msg.sender, withdrawalMessage, totalWithdrawalAmount);\n    }\n\n    function setMinWithdrawalAmount(uint256 _minWithdrawalAmount) external only(DEFAULT_ADMIN_ROLE) {\n        minWithdrawalAmount = _minWithdrawalAmount;\n    }\n\n    function setMaxWithdrawalRecipients(uint256 _maxWithdrawalRecipients) external only(DEFAULT_ADMIN_ROLE) {\n        maxWithdrawalRecipients = _maxWithdrawalRecipients;\n    }\n\n    /**\n     * Function is unneeded as we receive no messages from root chain\n     */\n    function _processMessageFromRoot(bytes memory message) internal override {}\n}"
    },
    "contracts/child/interfaces/IChildERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\ninterface IChildERC20 {\n    function transfer(\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @notice called when user wants to withdraw tokens back to root chain\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\n     * @param amount amount of tokens to withdraw\n     */\n    function withdraw(uint256 amount) external;\n}"
    },
    "contracts/common/DepositEncoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nlibrary DepositEncoder {\n    uint96 private constant AMOUNT_MASK = type(uint96).max;\n\n    /**\n     * Encodes a deposit such that fits into a single bytes32 variable.\n     * @dev This allows the deposit to be easily sent through Matic's Data Tunnel and decoded on the other side\n     * @param recipient - The address which can claim this deposit on Matic\n     * @param amount - The amount of the token which claimable by the recipient\n     */\n    function encodeDeposit(address recipient, uint96 amount) internal pure returns (bytes32) {\n        return bytes32(uint256(recipient) << 96 | uint256(amount));\n    }\n\n    /**\n     * Extracts the amount of tokens to be bridged for a given deposit\n     */\n    function getDepositRecipient(bytes32 encodedDeposit) internal pure returns (address) {\n        return address(uint160(uint256(encodedDeposit) >> 96));\n    }\n\n    /**\n     * Extracts the amount of tokens to be bridged for a given deposit\n     */\n    function getDepositAmount(bytes32 encodedDeposit) internal pure returns (uint96) {\n        return uint96(uint256(encodedDeposit) & AMOUNT_MASK);\n    }\n\n    /**\n     * Extracts the amount of tokens to be bridged for a given deposit\n     */\n    function decodeDeposit(bytes32 encodedDeposit) internal pure returns (address recipient, uint96 amount) {\n        // Shift bytes representing recipient address down into lower positions\n        recipient = address(uint160(uint256(encodedDeposit) >> 96));\n        amount = uint96(uint256(encodedDeposit) & AMOUNT_MASK);\n    }\n}\n"
    },
    "contracts/root/RootWithdrawalBatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { RootWithdrawalBatcherTunnel } from \"./RootWithdrawalBatcherTunnel.sol\";\nimport { DepositEncoder } from \"../common/DepositEncoder.sol\";\n\ncontract RootWithdrawalBatcher is RootWithdrawalBatcherTunnel {\n    using DepositEncoder for bytes32;\n\n    event Claim(address indexed recipient, uint256 amount);\n\n    IERC20 public immutable withdrawalToken;\n\n    mapping(address=>uint256) public balance;\n\n    /**\n     * @dev constructor argument _childTunnel is needed for testing. In a production deploy this should be set to zero\n     *      RootWithdrawalBatcherTunnel will then only accept messages from the a contract on the child chain at the same address as itself\n     * @param _withdrawalToken - ERC20 token which this contract distributes\n     * @param _checkpointManager - ERC20 token which this contract distributes\n     * @param _childTunnel - address of contract which this contract accepts messages from. Set to 0 in a production deploy.\n     */\n    constructor(IERC20 _withdrawalToken, address _checkpointManager, address _childTunnel) public RootWithdrawalBatcherTunnel(_checkpointManager, _childTunnel) {\n        withdrawalToken = _withdrawalToken;\n    }\n\n    /**\n     * @notice Claim caller's balance, sending the tokens to their address\n     */\n    function claim() external {\n        claimFor(msg.sender);\n    }\n\n\n    /**\n     * @notice Claim a recipient's balance for them, sending the tokens to their address\n     * @param recipient - the address of the recipient for which to claim\n     */\n    function claimFor(address recipient) public {\n        uint256 amount = balance[recipient];\n        balance[recipient] = 0;\n        require(withdrawalToken.transfer(recipient, amount), \"Token transfer failed\");\n        emit Claim(recipient, amount);\n    }\n\n    /**\n     * @notice Process message received from Child Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param message bytes message that was sent from Child Tunnel\n     */\n    function _processMessageFromChild(bytes memory message) override internal {\n        distributeWithdrawals(message);\n    }\n\n    /**\n     * @notice Distribute a batch of withdrawals to its recipients\n     * @param message bytes object of packed encoded deposits\n     */\n    function distributeWithdrawals(bytes memory message) private {\n        for (uint256 i = 32; i <= message.length; i = i + 32){\n            // Each 32 bytes of the message corresponds to an encoded deposit\n            bytes32 encodedWithdrawal;\n            assembly {\n                encodedWithdrawal := mload(add(message, i))\n            }\n\n            // Decode and add to user's balance\n            (address recipient, uint96 amount) = encodedWithdrawal.decodeDeposit();\n            balance[recipient] += amount;\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/root/RootWithdrawalBatcherTunnel.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport { AccessControlMixin } from \"../common/Matic/AccessControlMixin.sol\";\nimport { RLPReader } from \"./lib/RLPReader.sol\";\nimport { MerklePatriciaProof } from \"./lib/MerklePatriciaProof.sol\";\nimport { ICheckpointManager } from \"./interfaces/ICheckpointManager.sol\";\nimport { RLPReader } from \"./lib/RLPReader.sol\";\nimport { MerklePatriciaProof } from \"./lib/MerklePatriciaProof.sol\";\nimport { Merkle } from \"./lib/Merkle.sol\";\n\nabstract contract RootWithdrawalBatcherTunnel is AccessControlMixin {\n    using RLPReader for bytes;\n    using RLPReader for RLPReader.RLPItem;\n    using Merkle for bytes32;\n    using SafeMath for uint256;\n\n    // keccak256(MessageSent(bytes))\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\n\n    // root chain manager\n    ICheckpointManager public immutable checkpointManager;\n    // child tunnel contract which receives and sends messages \n    address public immutable childTunnel;\n    // storage to avoid duplicate exits\n    mapping(bytes32 => bool) public processedExits;\n\n    constructor(address _checkpointManager, address _childTunnel) internal {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        \n        checkpointManager = ICheckpointManager(_checkpointManager);\n        childTunnel = _childTunnel != address(0x0) ? _childTunnel : address(this);\n    }\n\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\n            .toRlpItem()\n            .toList();\n\n        // checking if exit has already been processed\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\n        bytes32 exitHash = keccak256(\n            abi.encodePacked(\n                inputDataRLPList[2].toUint(), // blockNumber\n                // first 2 nibbles are dropped while generating nibble array\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\n                // so converting to nibble array and then hashing it\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\n                inputDataRLPList[9].toUint() // receiptLogIndex\n            )\n        );\n        require(\n            processedExits[exitHash] == false,\n            \"RootTunnel: EXIT_ALREADY_PROCESSED\"\n        );\n        processedExits[exitHash] = true;\n\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\n            .toBytes()\n            .toRlpItem()\n            .toList();\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\n            .toList()[\n                inputDataRLPList[9].toUint() // receiptLogIndex\n            ];\n\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\n        \n        // check child tunnel\n        require(childTunnel == RLPReader.toAddress(logRLPList[0]), \"RootTunnel: INVALID_CHILD_TUNNEL\");\n\n        // verify receipt inclusion\n        require(\n            MerklePatriciaProof.verify(\n                inputDataRLPList[6].toBytes(), // receipt\n                inputDataRLPList[8].toBytes(), // branchMask\n                inputDataRLPList[7].toBytes(), // receiptProof\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\n            ),\n            \"RootTunnel: INVALID_RECEIPT_PROOF\"\n        );\n\n        // verify checkpoint inclusion\n        _checkBlockMembershipInCheckpoint(\n            inputDataRLPList[2].toUint(), // blockNumber\n            inputDataRLPList[3].toUint(), // blockTime\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\n            inputDataRLPList[0].toUint(), // headerNumber\n            inputDataRLPList[1].toBytes() // blockProof\n        );\n\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\n\n        require(\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\n            \"RootTunnel: INVALID_SIGNATURE\"\n        );\n\n        // received message data\n        bytes memory receivedData = logRLPList[2].toBytes();\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\n        return message;\n    }\n\n    function _checkBlockMembershipInCheckpoint(\n        uint256 blockNumber,\n        uint256 blockTime,\n        bytes32 txRoot,\n        bytes32 receiptRoot,\n        uint256 headerNumber,\n        bytes memory blockProof\n    ) private view returns (uint256) {\n        (\n            bytes32 headerRoot,\n            uint256 startBlock,\n            ,\n            uint256 createdAt,\n\n        ) = checkpointManager.headerBlocks(headerNumber);\n\n        require(\n            keccak256(\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\n            )\n                .checkMembership(\n                blockNumber.sub(startBlock),\n                headerRoot,\n                blockProof\n            ),\n            \"RootTunnel: INVALID_HEADER\"\n        );\n        return createdAt;\n    }\n\n    /**\n     * @notice receive message from L2 to L1, validated by proof\n     * @dev This function verifies if the transaction actually happened on child chain\n     *\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\n     *  2 - blockNumber - Block number containing the reference tx on child chain\n     *  3 - blockTime - Reference tx block time\n     *  4 - txRoot - Transactions root of block\n     *  5 - receiptRoot - Receipts root of block\n     *  6 - receipt - Receipt of the reference transaction\n     *  7 - receiptProof - Merkle proof of the reference receipt\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\n     *  9 - receiptLogIndex - Log Index to read from the receipt\n     */\n    function receiveMessage(bytes memory inputData) public virtual {\n        bytes memory message = _validateAndExtractMessage(inputData);\n        _processMessageFromChild(message);\n    }\n\n    /**\n     * @notice Process message received from Child Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param message bytes message that was sent from Child Tunnel\n     */\n    function _processMessageFromChild(bytes memory message) virtual internal;\n}"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/root/lib/RLPReader.sol": {
      "content": "/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n * https://github.com/hamdiallam/Solidity-RLP/blob/e681e25a376dbd5426b509380bc03446f05d0f97/contracts/RLPReader.sol\n */\npragma solidity 0.6.8;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item)\n        internal\n        pure\n        returns (RLPItem memory)\n    {\n        require(item.length > 0, \"RLPReader: INVALID_BYTES_LENGTH\");\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @param item RLP encoded list in bytes\n     */\n    function toList(RLPItem memory item)\n        internal\n        pure\n        returns (RLPItem[] memory)\n    {\n        require(isList(item), \"RLPReader: ITEM_NOT_LIST\");\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n        uint256 listLength = _itemLength(item.memPtr);\n        require(listLength == item.len, \"RLPReader: LIST_DECODED_LENGTH_MISMATCH\");\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory result = new bytes(item.len);\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        require(!isList(item), \"RLPReader: DECODING_LIST_AS_ADDRESS\");\n        // 1 byte for the length prefix\n        require(item.len == 21, \"RLPReader: INVALID_ADDRESS_LENGTH\");\n\n        return address(toUint(item));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(!isList(item), \"RLPReader: DECODING_LIST_AS_UINT\");\n        require(item.len <= 33, \"RLPReader: INVALID_UINT_LENGTH\");\n\n        uint256 itemLength = _itemLength(item.memPtr);\n        require(itemLength == item.len, \"RLPReader: UINT_DECODED_LENGTH_MISMATCH\");\n\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 len = item.len - offset;\n        uint256 result;\n        uint256 memPtr = item.memPtr + offset;\n        assembly {\n            result := mload(memPtr)\n\n            // shfit to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        uint256 itemLength = _itemLength(item.memPtr);\n        require(itemLength == item.len, \"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\");\n        // one byte prefix\n        require(item.len == 33, \"RLPReader: INVALID_UINT_STRICT_LENGTH\");\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        uint256 listLength = _itemLength(item.memPtr);\n        require(listLength == item.len, \"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\");\n        uint256 offset = _payloadOffset(item.memPtr);\n\n        uint256 len = item.len - offset; // data length\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\n        // require(isList(item), \"RLPReader: NUM_ITEMS_NOT_LIST\");\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            require(currPtr <= endPtr, \"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\");\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\n        else if (byte0 < STRING_LONG_START)\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) return 0;\n        else if (\n            byte0 < STRING_LONG_START ||\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\n        ) return 1;\n        else if (byte0 < LIST_SHORT_START)\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(\n        uint256 src,\n        uint256 dest,\n        uint256 len\n    ) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}"
    },
    "contracts/root/lib/MerklePatriciaProof.sol": {
      "content": "/*\n * @title MerklePatriciaVerifier\n * @author Sam Mayo (sammayo888@gmail.com)\n *\n * @dev Library for verifing merkle patricia proofs.\n */\npragma solidity 0.6.8;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary MerklePatriciaProof {\n    /*\n     * @dev Verifies a merkle patricia proof.\n     * @param value The terminating value in the trie.\n     * @param encodedPath The path in the trie leading to value.\n     * @param rlpParentNodes The rlp encoded stack of nodes.\n     * @param root The root hash of the trie.\n     * @return The boolean validity of the proof.\n     */\n    function verify(\n        bytes memory value,\n        bytes memory encodedPath,\n        bytes memory rlpParentNodes,\n        bytes32 root\n    ) internal pure returns (bool) {\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\n\n        bytes memory currentNode;\n        RLPReader.RLPItem[] memory currentNodeList;\n\n        bytes32 nodeKey = root;\n        uint256 pathPtr = 0;\n\n        bytes memory path = _getNibbleArray(encodedPath);\n        if (path.length == 0) {\n            return false;\n        }\n\n        for (uint256 i = 0; i < parentNodes.length; i++) {\n            if (pathPtr > path.length) {\n                return false;\n            }\n\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\n            if (nodeKey != keccak256(currentNode)) {\n                return false;\n            }\n            currentNodeList = RLPReader.toList(parentNodes[i]);\n\n            if (currentNodeList.length == 17) {\n                if (pathPtr == path.length) {\n                    if (\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\n                        keccak256(value)\n                    ) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                uint8 nextPathNibble = uint8(path[pathPtr]);\n                if (nextPathNibble > 16) {\n                    return false;\n                }\n                nodeKey = bytes32(\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\n                );\n                pathPtr += 1;\n            } else if (currentNodeList.length == 2) {\n                uint256 traversed = _nibblesToTraverse(\n                    RLPReader.toBytes(currentNodeList[0]),\n                    path,\n                    pathPtr\n                );\n                if (pathPtr + traversed == path.length) {\n                    //leaf node\n                    if (\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\n                        keccak256(value)\n                    ) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                //extension node\n                if (traversed == 0) {\n                    return false;\n                }\n\n                pathPtr += traversed;\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\n            } else {\n                return false;\n            }\n        }\n    }\n\n    function _nibblesToTraverse(\n        bytes memory encodedPartialPath,\n        bytes memory path,\n        uint256 pathPtr\n    ) private pure returns (uint256) {\n        uint256 len = 0;\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\n        // and slicedPath have elements that are each one hex character (1 nibble)\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\n        bytes memory slicedPath = new bytes(partialPath.length);\n\n        // pathPtr counts nibbles in path\n        // partialPath.length is a number of nibbles\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\n            bytes1 pathNibble = path[i];\n            slicedPath[i - pathPtr] = pathNibble;\n        }\n\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\n            len = partialPath.length;\n        } else {\n            len = 0;\n        }\n        return len;\n    }\n\n    // bytes b must be hp encoded\n    function _getNibbleArray(bytes memory b)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory nibbles = \"\";\n        if (b.length > 0) {\n            uint8 offset;\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\n            if (hpNibble == 1 || hpNibble == 3) {\n                nibbles = new bytes(b.length * 2 - 1);\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\n                nibbles[0] = oddNibble;\n                offset = 1;\n            } else {\n                nibbles = new bytes(b.length * 2 - 2);\n                offset = 0;\n            }\n\n            for (uint256 i = offset; i < nibbles.length; i++) {\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\n            }\n        }\n        return nibbles;\n    }\n\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\n        private\n        pure\n        returns (bytes1)\n    {\n        return\n            bytes1(\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\n            );\n    }\n}"
    },
    "contracts/root/interfaces/ICheckpointManager.sol": {
      "content": "pragma solidity 0.6.8;\n\ncontract ICheckpointManager {\n    struct HeaderBlock {\n        bytes32 root;\n        uint256 start;\n        uint256 end;\n        uint256 createdAt;\n        address proposer;\n    }\n\n    /**\n     * @notice mapping of checkpoint header numbers to block details\n     * @dev These checkpoints are submited by plasma contracts\n     */\n    mapping(uint256 => HeaderBlock) public headerBlocks;\n}"
    },
    "contracts/root/lib/Merkle.sol": {
      "content": "pragma solidity 0.6.8;\n\nlibrary Merkle {\n    function checkMembership(\n        bytes32 leaf,\n        uint256 index,\n        bytes32 rootHash,\n        bytes memory proof\n    ) internal pure returns (bool) {\n        require(proof.length % 32 == 0, \"Invalid proof length\");\n        uint256 proofHeight = proof.length / 32;\n        // Proof of size n means, height of the tree is n+1.\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\n        require(index < 2 ** proofHeight, \"Leaf index is too big\");\n\n        bytes32 proofElement;\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            assembly {\n                proofElement := mload(add(proof, i))\n            }\n\n            if (index % 2 == 0) {\n                computedHash = keccak256(\n                    abi.encodePacked(computedHash, proofElement)\n                );\n            } else {\n                computedHash = keccak256(\n                    abi.encodePacked(proofElement, computedHash)\n                );\n            }\n\n            index = index / 2;\n        }\n        return computedHash == rootHash;\n    }\n}"
    },
    "contracts/root/mocks/MockRootChainManager.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { IRootChainManager } from \"../interfaces/IRootChainManager.sol\";\nimport { RootChainManagerStorage } from \"./MockRootChainManagerStorage.sol\";\nimport { IStateSender } from \"../interfaces/IStateSender.sol\";\nimport { ICheckpointManager } from \"../interfaces/ICheckpointManager.sol\";\nimport { RLPReader } from \"../lib/RLPReader.sol\";\nimport { MerklePatriciaProof } from \"../lib/MerklePatriciaProof.sol\";\nimport { Merkle } from \"../lib/Merkle.sol\";\nimport { ITokenPredicate } from \"../interfaces/ITokenPredicate.sol\";\nimport { Initializable } from \"../../common/Matic/Initializable.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { AccessControlMixin } from \"../../common/Matic/AccessControlMixin.sol\";\n\ncontract MockRootChainManager is\n    IRootChainManager,\n    Initializable,\n    AccessControl, // included to match old storage layout while upgrading\n    RootChainManagerStorage, // created to match old storage layout while upgrading\n    AccessControlMixin\n{\n    using RLPReader for bytes;\n    using RLPReader for RLPReader.RLPItem;\n    using Merkle for bytes32;\n    using SafeMath for uint256;\n\n    // maybe DEPOSIT and MAP_TOKEN can be reduced to bytes4\n    bytes32 public constant DEPOSIT = keccak256(\"DEPOSIT\");\n    bytes32 public constant MAP_TOKEN = keccak256(\"MAP_TOKEN\");\n    address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    bytes32 public constant MAPPER_ROLE = keccak256(\"MAPPER_ROLE\");\n\n    /**\n     * @notice Initialize the contract after it has been proxified\n     * @dev meant to be called once immediately after deployment\n     * @param _owner the account that should be granted admin role\n     */\n    function initialize(\n        address _owner\n    )\n        external\n        initializer\n    {\n        _setupContractId(\"RootChainManager\");\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(MAPPER_ROLE, _owner);\n    }\n\n    // adding seperate function setupContractId since initialize is already called with old implementation\n    function setupContractId()\n        external\n        only(DEFAULT_ADMIN_ROLE)\n    {\n        _setupContractId(\"RootChainManager\");\n    }\n\n    /**\n     * @notice Set the state sender, callable only by admins\n     * @dev This should be the state sender from plasma contracts\n     * It is used to send bytes from root to child chain\n     * @param newStateSender address of state sender contract\n     */\n    function setStateSender(address newStateSender)\n        external\n        only(DEFAULT_ADMIN_ROLE)\n    {\n        _stateSender = IStateSender(newStateSender);\n    }\n\n    /**\n     * @notice Get the address of contract set as state sender\n     * @return The address of state sender contract\n     */\n    function stateSenderAddress() external view returns (address) {\n        return address(_stateSender);\n    }\n\n    /**\n     * @notice Set the checkpoint manager, callable only by admins\n     * @dev This should be the plasma contract responsible for keeping track of checkpoints\n     * @param newCheckpointManager address of checkpoint manager contract\n     */\n    function setCheckpointManager(address newCheckpointManager)\n        external\n        only(DEFAULT_ADMIN_ROLE)\n    {\n        _checkpointManager = ICheckpointManager(newCheckpointManager);\n    }\n\n    /**\n     * @notice Get the address of contract set as checkpoint manager\n     * @return The address of checkpoint manager contract\n     */\n    function checkpointManagerAddress() external view returns (address) {\n        return address(_checkpointManager);\n    }\n\n    /**\n     * @notice Set the child chain manager, callable only by admins\n     * @dev This should be the contract responsible to receive deposit bytes on child chain\n     * @param newChildChainManager address of child chain manager contract\n     */\n    function setChildChainManagerAddress(address newChildChainManager)\n        external\n        only(DEFAULT_ADMIN_ROLE)\n    {\n        require(newChildChainManager != address(0x0), \"RootChainManager: INVALID_CHILD_CHAIN_ADDRESS\");\n        childChainManagerAddress = newChildChainManager;\n    }\n\n    /**\n     * @notice Register a token predicate address against its type, callable only by mappers\n     * @dev A predicate is a contract responsible to process the token specific logic while locking or exiting tokens\n     * @param tokenType bytes32 unique identifier for the token type\n     * @param predicateAddress address of token predicate address\n     */\n    function registerPredicate(bytes32 tokenType, address predicateAddress)\n        external\n        override\n        only(MAPPER_ROLE)\n    {\n        typeToPredicate[tokenType] = predicateAddress;\n        emit PredicateRegistered(tokenType, predicateAddress);\n    }\n\n    /**\n     * @notice Map a token to enable its movement via the PoS Portal, callable only by mappers\n     * @param rootToken address of token on root chain\n     * @param childToken address of token on child chain\n     * @param tokenType bytes32 unique identifier for the token type\n     */\n    function mapToken(\n        address rootToken,\n        address childToken,\n        bytes32 tokenType\n    ) external override only(MAPPER_ROLE) {\n        // explicit check if token is already mapped to avoid accidental remaps\n        require(\n            rootToChildToken[rootToken] == address(0) &&\n            childToRootToken[childToken] == address(0),\n            \"RootChainManager: ALREADY_MAPPED\"\n        );\n        _mapToken(rootToken, childToken, tokenType);\n    }\n\n    function _mapToken(\n        address rootToken,\n        address childToken,\n        bytes32 tokenType\n    ) private {\n        require(\n            typeToPredicate[tokenType] != address(0x0),\n            \"RootChainManager: TOKEN_TYPE_NOT_SUPPORTED\"\n        );\n\n        rootToChildToken[rootToken] = childToken;\n        childToRootToken[childToken] = rootToken;\n        tokenToType[rootToken] = tokenType;\n\n        emit TokenMapped(rootToken, childToken, tokenType);\n\n        bytes memory syncData = abi.encode(rootToken, childToken, tokenType);\n        _stateSender.syncState(\n            childChainManagerAddress,\n            abi.encode(MAP_TOKEN, syncData)\n        );\n    }\n\n    /**\n     * @notice Move tokens from root to child chain\n     * @dev This mechanism supports arbitrary tokens as long as its predicate has been registered and the token is mapped\n     * @param user address of account that should receive this deposit on child chain\n     * @param rootToken address of token that is being deposited\n     * @param depositData bytes data that is sent to predicate and child token contracts to handle deposit\n     */\n    function depositFor(\n        address user,\n        address rootToken,\n        bytes calldata depositData\n    ) external override {\n        require(\n            rootToken != ETHER_ADDRESS,\n            \"RootChainManager: INVALID_ROOT_TOKEN\"\n        );\n        _depositFor(user, rootToken, depositData);\n    }\n\n    function _depositEtherFor(address user) private {\n        bytes memory depositData = abi.encode(msg.value);\n        _depositFor(user, ETHER_ADDRESS, depositData);\n\n        // payable(typeToPredicate[tokenToType[ETHER_ADDRESS]]).transfer(msg.value);\n        // transfer doesn't work as expected when receiving contract is proxified so using call\n        (bool success, /* bytes memory data */) = typeToPredicate[tokenToType[ETHER_ADDRESS]].call{value: msg.value}(\"\");\n        if (!success) {\n            revert(\"RootChainManager: ETHER_TRANSFER_FAILED\");\n        }\n    }\n\n    function _depositFor(\n        address user,\n        address rootToken,\n        bytes memory depositData\n    ) private {\n        require(\n            rootToChildToken[rootToken] != address(0x0) &&\n               tokenToType[rootToken] != 0,\n            \"RootChainManager: TOKEN_NOT_MAPPED\"\n        );\n        address predicateAddress = typeToPredicate[tokenToType[rootToken]];\n        require(\n            predicateAddress != address(0),\n            \"RootChainManager: INVALID_TOKEN_TYPE\"\n        );\n        require(\n            user != address(0),\n            \"RootChainManager: INVALID_USER\"\n        );\n\n        ITokenPredicate(predicateAddress).lockTokens(\n            _msgSender(),\n            user,\n            rootToken,\n            depositData\n        );\n        bytes memory syncData = abi.encode(user, rootToken, depositData);\n        _stateSender.syncState(\n            childChainManagerAddress,\n            abi.encode(DEPOSIT, syncData)\n        );\n    }\n\n    /**\n     * @notice exit tokens by providing proof\n     * @dev This function verifies if the transaction actually happened on child chain\n     * the transaction log is then sent to token predicate to handle it accordingly\n     *\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\n     *  2 - blockNumber - Block number containing the reference tx on child chain\n     *  3 - blockTime - Reference tx block time\n     *  4 - txRoot - Transactions root of block\n     *  5 - receiptRoot - Receipts root of block\n     *  6 - receipt - Receipt of the reference transaction\n     *  7 - receiptProof - Merkle proof of the reference receipt\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\n     *  9 - receiptLogIndex - Log Index to read from the receipt\n     */\n    function exit(bytes calldata inputData) external override {\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\n            .toRlpItem()\n            .toList();\n\n        // checking if exit has already been processed\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\n        bytes32 exitHash = keccak256(\n            abi.encodePacked(\n                inputDataRLPList[2].toUint(), // blockNumber\n                // first 2 nibbles are dropped while generating nibble array\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\n                // so converting to nibble array and then hashing it\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\n                inputDataRLPList[9].toUint() // receiptLogIndex\n            )\n        );\n        require(\n            processedExits[exitHash] == false,\n            \"RootChainManager: EXIT_ALREADY_PROCESSED\"\n        );\n        processedExits[exitHash] = true;\n\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\n            .toBytes()\n            .toRlpItem()\n            .toList();\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\n            .toList()[\n                inputDataRLPList[9].toUint() // receiptLogIndex\n            ];\n\n        address childToken = RLPReader.toAddress(logRLP.toList()[0]); // log emitter address field\n        // log should be emmited only by the child token\n        address rootToken = childToRootToken[childToken];\n        require(\n            rootToken != address(0),\n            \"RootChainManager: TOKEN_NOT_MAPPED\"\n        );\n\n        address predicateAddress = typeToPredicate[\n            tokenToType[rootToken]\n        ];\n\n        // branch mask can be maximum 32 bits\n        require(\n            inputDataRLPList[8].toUint() &\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 ==\n                0,\n            \"RootChainManager: INVALID_BRANCH_MASK\"\n        );\n\n        // verify receipt inclusion\n        require(\n            MerklePatriciaProof.verify(\n                inputDataRLPList[6].toBytes(), // receipt\n                inputDataRLPList[8].toBytes(), // branchMask\n                inputDataRLPList[7].toBytes(), // receiptProof\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\n            ),\n            \"RootChainManager: INVALID_PROOF\"\n        );\n\n        // verify checkpoint inclusion\n        _checkBlockMembershipInCheckpoint(\n            inputDataRLPList[2].toUint(), // blockNumber\n            inputDataRLPList[3].toUint(), // blockTime\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\n            inputDataRLPList[0].toUint(), // headerNumber\n            inputDataRLPList[1].toBytes() // blockProof\n        );\n\n        ITokenPredicate(predicateAddress).exitTokens(\n            _msgSender(),\n            childToRootToken[childToken],\n            logRLP.toRlpBytes()\n        );\n    }\n\n    function _checkBlockMembershipInCheckpoint(\n        uint256 blockNumber,\n        uint256 blockTime,\n        bytes32 txRoot,\n        bytes32 receiptRoot,\n        uint256 headerNumber,\n        bytes memory blockProof\n    ) private view returns (uint256) {\n        (\n            bytes32 headerRoot,\n            uint256 startBlock,\n            ,\n            uint256 createdAt,\n\n        ) = _checkpointManager.headerBlocks(headerNumber);\n\n        require(\n            keccak256(\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\n            )\n                .checkMembership(\n                blockNumber.sub(startBlock),\n                headerRoot,\n                blockProof\n            ),\n            \"RootChainManager: INVALID_HEADER\"\n        );\n        return createdAt;\n    }\n}"
    },
    "contracts/root/interfaces/IRootChainManager.sol": {
      "content": "pragma solidity 0.6.8;\n\ninterface IRootChainManager {\n    event TokenMapped(\n        address indexed rootToken,\n        address indexed childToken,\n        bytes32 indexed tokenType\n    );\n\n    event PredicateRegistered(\n        bytes32 indexed tokenType,\n        address indexed predicateAddress\n    );\n\n    function registerPredicate(bytes32 tokenType, address predicateAddress)\n        external;\n\n    function mapToken(\n        address rootToken,\n        address childToken,\n        bytes32 tokenType\n    ) external;\n\n    function depositFor(\n        address user,\n        address rootToken,\n        bytes calldata depositData\n    ) external;\n\n    function exit(bytes calldata inputData) external;\n}"
    },
    "contracts/root/mocks/MockRootChainManagerStorage.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport {IStateSender} from \"../interfaces/IStateSender.sol\";\nimport {ICheckpointManager} from \"../interfaces/ICheckpointManager.sol\";\n\nabstract contract RootChainManagerStorage {\n    mapping(bytes32 => address) public typeToPredicate;\n    mapping(address => address) public rootToChildToken;\n    mapping(address => address) public childToRootToken;\n    mapping(address => bytes32) public tokenToType;\n    mapping(bytes32 => bool) public processedExits;\n    IStateSender internal _stateSender;\n    ICheckpointManager internal _checkpointManager;\n    address public childChainManagerAddress;\n}"
    },
    "contracts/root/interfaces/IStateSender.sol": {
      "content": "pragma solidity 0.6.8;\n\ninterface IStateSender {\n    function syncState(address receiver, bytes calldata data) external;\n}"
    },
    "contracts/root/interfaces/ITokenPredicate.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport {RLPReader} from \"../lib/RLPReader.sol\";\n\n/// @title Token predicate interface for all pos portal predicates\n/// @notice Abstract interface that defines methods for custom predicates\ninterface ITokenPredicate {\n\n    /**\n     * @notice Deposit tokens into pos portal\n     * @dev When `depositor` deposits tokens into pos portal, tokens get locked into predicate contract.\n     * @param depositor Address who wants to deposit tokens\n     * @param depositReceiver Address (address) who wants to receive tokens on side chain\n     * @param rootToken Token which gets deposited\n     * @param depositData Extra data for deposit (amount for ERC20, token id for ERC721 etc.) [ABI encoded]\n     */\n    function lockTokens(\n        address depositor,\n        address depositReceiver,\n        address rootToken,\n        bytes calldata depositData\n    ) external;\n\n    /**\n     * @notice Validates and processes exit while withdraw process\n     * @dev Validates exit log emitted on sidechain. Reverts if validation fails.\n     * @dev Processes withdraw based on custom logic. Example: transfer ERC20/ERC721, mint ERC721 if mintable withdraw\n     * @param sender Address\n     * @param rootToken Token which gets withdrawn\n     * @param logRLPList Valid sidechain log for data like amount, token id etc.\n     */\n    function exitTokens(\n        address sender,\n        address rootToken,\n        bytes calldata logRLPList\n    ) external;\n}"
    },
    "contracts/common/Matic/Initializable.sol": {
      "content": "pragma solidity 0.6.8;\n\ncontract Initializable {\n    bool inited = false;\n\n    modifier initializer() {\n        require(!inited, \"already inited\");\n        _;\n        inited = true;\n    }\n}"
    },
    "contracts/root/mocks/MockERC20Predicate.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport {AccessControlMixin} from \"../../common/Matic/AccessControlMixin.sol\";\nimport {RLPReader} from \"../lib/RLPReader.sol\";\nimport {ITokenPredicate} from \"../interfaces/ITokenPredicate.sol\";\nimport {Initializable} from \"../../common/Matic/Initializable.sol\";\n\ncontract MockERC20Predicate is ITokenPredicate, AccessControlMixin, Initializable {\n    using RLPReader for bytes;\n    using RLPReader for RLPReader.RLPItem;\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant TOKEN_TYPE = keccak256(\"ERC20\");\n    bytes32 public constant TRANSFER_EVENT_SIG = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    event LockedERC20(\n        address indexed depositor,\n        address indexed depositReceiver,\n        address indexed rootToken,\n        uint256 amount\n    );\n\n    constructor() public {}\n\n    function initialize(address _owner) external initializer {\n        _setupContractId(\"ERC20Predicate\");\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(MANAGER_ROLE, _owner);\n    }\n\n    /**\n     * @notice Lock ERC20 tokens for deposit, callable only by manager\n     * @param depositor Address who wants to deposit tokens\n     * @param depositReceiver Address (address) who wants to receive tokens on child chain\n     * @param rootToken Token which gets deposited\n     * @param depositData ABI encoded amount\n     */\n    function lockTokens(\n        address depositor,\n        address depositReceiver,\n        address rootToken,\n        bytes calldata depositData\n    )\n        external\n        override\n        only(MANAGER_ROLE)\n    {\n        uint256 amount = abi.decode(depositData, (uint256));\n        emit LockedERC20(depositor, depositReceiver, rootToken, amount);\n        IERC20(rootToken).safeTransferFrom(depositor, address(this), amount);\n    }\n\n    /**\n     * @notice Validates log signature, from and to address\n     * then sends the correct amount to withdrawer\n     * callable only by manager\n     * @param rootToken Token which gets withdrawn\n     * @param log Valid ERC20 burn log from child chain\n     */\n    function exitTokens(\n        address,\n        address rootToken,\n        bytes memory log\n    )\n        public\n        override\n        only(MANAGER_ROLE)\n    {\n        RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\n\n        require(\n            bytes32(logTopicRLPList[0].toUint()) == TRANSFER_EVENT_SIG, // topic0 is event sig\n            \"ERC20Predicate: INVALID_SIGNATURE\"\n        );\n\n        address withdrawer = address(logTopicRLPList[1].toUint()); // topic1 is from address\n\n        require(\n            address(logTopicRLPList[2].toUint()) == address(0), // topic2 is to address\n            \"ERC20Predicate: INVALID_RECEIVER\"\n        );\n\n        IERC20(rootToken).safeTransfer(\n            withdrawer,\n            logRLPList[2].toUint() // log data field\n        );\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/root/mocks/MockCheckpointManager.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {ICheckpointManager} from \"../interfaces/ICheckpointManager.sol\";\n\n/**\n* @notice Mock Checkpoint Manager contract to simulate plasma checkpoints while testing\n*/\ncontract MockCheckpointManager is ICheckpointManager {\n    using SafeMath for uint256;\n\n    uint256 constant CHECKPOINT_ID_INTERVAL = 10000;\n    uint256 public currentCheckpointNumber = 0;\n\n    function setCheckpoint(uint256 checkpointId, bytes32 rootHash, uint256 start, uint256 end) public {\n        HeaderBlock memory headerBlock = HeaderBlock({\n            root: rootHash,\n            start: start,\n            end: end,\n            createdAt: now,\n            proposer: msg.sender\n        });\n\n        currentCheckpointNumber = checkpointId.add(CHECKPOINT_ID_INTERVAL);\n        headerBlocks[checkpointId] = headerBlock;\n    }\n}"
    },
    "contracts/root/mocks/MockStateSender.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport {IStateSender} from \"../interfaces/IStateSender.sol\";\n\n/**\n* @notice Mock State Sender contract to simulate plasma state sender while testing\n*/\ncontract MockStateSender is IStateSender {\n    /**\n     * @notice Event emitted when when syncState is called\n     * @dev Heimdall bridge listens to this event and sends the data to receiver contract on child chain\n     * @param id Id of the sync, increamented for each event in case of actual state sender contract\n     * @param contractAddress the contract receiving data on child chain\n     * @param data bytes data to be sent\n     */\n    event StateSynced(\n        uint256 indexed id,\n        address indexed contractAddress,\n        bytes data\n    );\n\n    /**\n     * @notice called to send data to child chain\n     * @dev sender and receiver contracts need to be registered in case of actual state sender contract\n     * @param receiver the contract receiving data on child chain\n     * @param data bytes data to be sent\n     */\n    function syncState(address receiver, bytes calldata data) external override {\n        emit StateSynced(1, receiver, data);\n    }\n}"
    },
    "contracts/common/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    constructor() ERC20(\"TestToken\", \"TEST\") public {}\n\n    function mint(uint256 amount) public returns (bool) {\n        mint(msg.sender, amount);\n    }\n\n    function mint(address recipient, uint256 amount) public returns (bool) {\n        _mint(recipient, amount);\n        return true;\n    }\n\n    /**\n     * @notice called when user wants to withdraw tokens back to root chain\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\n     * @param amount amount of tokens to withdraw\n     */\n    function withdraw(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/common/MockDepositEncoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport { DepositEncoder } from \"./DepositEncoder.sol\";\n\ncontract MockDepositEncoder {\n    using DepositEncoder for bytes32;\n\n    function encodeDeposit(address recipient, uint96 amount) public pure returns (bytes32) {\n        return DepositEncoder.encodeDeposit(recipient, amount);\n    }\n\n    function getDepositRecipient(bytes32 encodedDeposit) public pure returns (address) {\n        return encodedDeposit.getDepositRecipient();\n    }\n\n    function getDepositAmount(bytes32 encodedDeposit) public pure returns (uint96) {\n        return encodedDeposit.getDepositAmount();\n    }\n\n    function decodeDeposit(bytes32 encodedDeposit) public pure returns (address recipient, uint96 amount) {\n        return encodedDeposit.decodeDeposit();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}