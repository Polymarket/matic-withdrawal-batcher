{
  "address": "0xF65C4C70463676DC2e0834e8b64261F802e63183",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_withdrawalToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childTunnel",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf21dfdf53349c7a562d77c1c220b10d183de4872bbe054ad732e92b59c11094f",
  "receipt": {
    "to": null,
    "from": "0x99802f4Fc52f9D07401edAb52a1FA8EcCD0869b0",
    "contractAddress": "0xF65C4C70463676DC2e0834e8b64261F802e63183",
    "transactionIndex": 0,
    "gasUsed": "1985459",
    "logsBloom": "0x
    "blockHash": "0x445deeb1a8a7f59d365c4849accfe362c6ab57a752de893e86e4dc0772917d2c",
    "transactionHash": "0xf21dfdf53349c7a562d77c1c220b10d183de4872bbe054ad732e92b59c11094f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4255300,
        "transactionHash": "0xf21dfdf53349c7a562d77c1c220b10d183de4872bbe054ad732e92b59c11094f",
        "address": "0xF65C4C70463676DC2e0834e8b64261F802e63183",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000099802f4fc52f9d07401edab52a1fa8eccd0869b0",
          "0x00000000000000000000000099802f4fc52f9d07401edab52a1fa8eccd0869b0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x445deeb1a8a7f59d365c4849accfe362c6ab57a752de893e86e4dc0772917d2c"
      }
    ],
    "blockNumber": 4255300,
    "cumulativeGasUsed": "1985459",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x655f2166b0709cd575202630952d71e2bb0d61af",
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "2dc58dad6f425f71f12052883a8fbd67",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_withdrawalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childTunnel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"claimFor(address)\":{\"params\":{\"recipient\":\"- the address of the recipient for which to claim\"}},\"constructor\":{\"details\":\"constructor argument _childTunnel is needed for testing. In a production deploy this should be set to zero     RootWithdrawalBatcherTunnel will then only accept messages from the a contract on the child chain at the same address as itself\",\"params\":{\"_checkpointManager\":\"- ERC20 token which this contract distributes\",\"_childTunnel\":\"- address of contract which this contract accepts messages from. Set to 0 in a production deploy.\",\"_withdrawalToken\":\"- ERC20 token which this contract distributes\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields 0 - headerNumber - Checkpoint header block number containing the reference tx 1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root 2 - blockNumber - Block number containing the reference tx on child chain 3 - blockTime - Reference tx block time 4 - txRoot - Transactions root of block 5 - receiptRoot - Receipts root of block 6 - receipt - Receipt of the reference transaction 7 - receiptProof - Merkle proof of the reference receipt 8 - branchMask - 32 bits denoting the path of receipt in merkle tree 9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"}}},\"userdoc\":{\"methods\":{\"claim()\":{\"notice\":\"Claim caller's balance, sending the tokens to their address\"},\"claimFor(address)\":{\"notice\":\"Claim a recipient's balance for them, sending the tokens to their address\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from L2 to L1, validated by proof\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/root/RootWithdrawalBatcher.sol\":\"RootWithdrawalBatcher\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/common/DepositEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nlibrary DepositEncoder {\\n    uint96 private constant AMOUNT_MASK = type(uint96).max;\\n\\n    /**\\n     * Encodes a deposit such that fits into a single bytes32 variable.\\n     * @dev This allows the deposit to be easily sent through Matic's Data Tunnel and decoded on the other side\\n     * @param recipient - The address which can claim this deposit on Matic\\n     * @param amount - The amount of the token which claimable by the recipient\\n     */\\n    function encodeDeposit(address recipient, uint96 amount) internal pure returns (bytes32) {\\n        return bytes32(uint256(recipient) << 96 | uint256(amount));\\n    }\\n\\n    /**\\n     * Extracts the amount of tokens to be bridged for a given deposit\\n     */\\n    function getDepositRecipient(bytes32 encodedDeposit) internal pure returns (address) {\\n        return address(uint160(uint256(encodedDeposit) >> 96));\\n    }\\n\\n    /**\\n     * Extracts the amount of tokens to be bridged for a given deposit\\n     */\\n    function getDepositAmount(bytes32 encodedDeposit) internal pure returns (uint96) {\\n        return uint96(uint256(encodedDeposit) & AMOUNT_MASK);\\n    }\\n\\n    /**\\n     * Extracts the amount of tokens to be bridged for a given deposit\\n     */\\n    function decodeDeposit(bytes32 encodedDeposit) internal pure returns (address recipient, uint96 amount) {\\n        // Shift bytes representing recipient address down into lower positions\\n        recipient = address(uint160(uint256(encodedDeposit) >> 96));\\n        amount = uint96(uint256(encodedDeposit) & AMOUNT_MASK);\\n    }\\n}\\n\",\"keccak256\":\"0x240b1cdcd94a8b0290910b9b438adea0759859d8c17b1f06f27c8e9ca05ab385\",\"license\":\"MIT\"},\"contracts/common/Matic/AccessControlMixin.sol\":{\"content\":\"pragma solidity 0.6.8;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\"));\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(\\n            hasRole(role, _msgSender()),\\n            _revertMsg\\n        );\\n        _;\\n    }\\n}\",\"keccak256\":\"0xef968b8aed41173093808f5637913ab0d716a94107cb07502cc07151c61c8e08\"},\"contracts/root/RootWithdrawalBatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { RootWithdrawalBatcherTunnel } from \\\"./RootWithdrawalBatcherTunnel.sol\\\";\\nimport { DepositEncoder } from \\\"../common/DepositEncoder.sol\\\";\\n\\ncontract RootWithdrawalBatcher is RootWithdrawalBatcherTunnel {\\n    using DepositEncoder for bytes32;\\n\\n    event Claim(address indexed recipient, uint256 amount);\\n\\n    IERC20 public immutable withdrawalToken;\\n\\n    mapping(address=>uint256) public balance;\\n\\n    /**\\n     * @dev constructor argument _childTunnel is needed for testing. In a production deploy this should be set to zero\\n     *      RootWithdrawalBatcherTunnel will then only accept messages from the a contract on the child chain at the same address as itself\\n     * @param _withdrawalToken - ERC20 token which this contract distributes\\n     * @param _checkpointManager - ERC20 token which this contract distributes\\n     * @param _childTunnel - address of contract which this contract accepts messages from. Set to 0 in a production deploy.\\n     */\\n    constructor(IERC20 _withdrawalToken, address _checkpointManager, address _childTunnel) public RootWithdrawalBatcherTunnel(_checkpointManager, _childTunnel) {\\n        withdrawalToken = _withdrawalToken;\\n    }\\n\\n    /**\\n     * @notice Claim caller's balance, sending the tokens to their address\\n     */\\n    function claim() external {\\n        claimFor(msg.sender);\\n    }\\n\\n\\n    /**\\n     * @notice Claim a recipient's balance for them, sending the tokens to their address\\n     * @param recipient - the address of the recipient for which to claim\\n     */\\n    function claimFor(address recipient) public {\\n        uint256 amount = balance[recipient];\\n        balance[recipient] = 0;\\n        require(withdrawalToken.transfer(recipient, amount), \\\"Token transfer failed\\\");\\n        emit Claim(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) override internal {\\n        distributeWithdrawals(message);\\n    }\\n\\n    /**\\n     * @notice Distribute a batch of withdrawals to its recipients\\n     * @param message bytes object of packed encoded deposits\\n     */\\n    function distributeWithdrawals(bytes memory message) private {\\n        for (uint256 i = 32; i <= message.length; i = i + 32){\\n            // Each 32 bytes of the message corresponds to an encoded deposit\\n            bytes32 encodedWithdrawal;\\n            assembly {\\n                encodedWithdrawal := mload(add(message, i))\\n            }\\n\\n            // Decode and add to user's balance\\n            (address recipient, uint96 amount) = encodedWithdrawal.decodeDeposit();\\n            balance[recipient] += amount;\\n        }\\n    }\\n}\",\"keccak256\":\"0x5ce9338e6fc159f0afaa9ab837c501e6b3f9d987cb9055fdef650e2a08a8da70\",\"license\":\"MIT\"},\"contracts/root/RootWithdrawalBatcherTunnel.sol\":{\"content\":\"pragma solidity ^0.6.8;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { AccessControlMixin } from \\\"../common/Matic/AccessControlMixin.sol\\\";\\nimport { RLPReader } from \\\"./lib/RLPReader.sol\\\";\\nimport { MerklePatriciaProof } from \\\"./lib/MerklePatriciaProof.sol\\\";\\nimport { ICheckpointManager } from \\\"./interfaces/ICheckpointManager.sol\\\";\\nimport { RLPReader } from \\\"./lib/RLPReader.sol\\\";\\nimport { MerklePatriciaProof } from \\\"./lib/MerklePatriciaProof.sol\\\";\\nimport { Merkle } from \\\"./lib/Merkle.sol\\\";\\n\\nabstract contract RootWithdrawalBatcherTunnel is AccessControlMixin {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using SafeMath for uint256;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // root chain manager\\n    ICheckpointManager public immutable checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public immutable childTunnel;\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _childTunnel) internal {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        \\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        childTunnel = _childTunnel != address(0x0) ? _childTunnel : address(this);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n            .toRlpItem()\\n            .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"RootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n            .toBytes()\\n            .toRlpItem()\\n            .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n            .toList()[\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            ];\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n        \\n        // check child tunnel\\n        require(childTunnel == RLPReader.toAddress(logRLPList[0]), \\\"RootTunnel: INVALID_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"RootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"RootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber.sub(startBlock),\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"RootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\",\"keccak256\":\"0x45cc4ea1dfe755327c64fa1cb9926d49301aa8e9d30c05f36a9b168d0fca83c0\"},\"contracts/root/interfaces/ICheckpointManager.sol\":{\"content\":\"pragma solidity 0.6.8;\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\",\"keccak256\":\"0x82288359d32d1aa07d3a9954c6521802a568581f8cedf928392b849513be71c3\"},\"contracts/root/lib/Merkle.sol\":{\"content\":\"pragma solidity 0.6.8;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\",\"keccak256\":\"0xd598bdfbd53ea4511ad895eb94e450776e6eb9dd244ec475ab2fff376183ee04\"},\"contracts/root/lib/MerklePatriciaProof.sol\":{\"content\":\"/*\\n * @title MerklePatriciaVerifier\\n * @author Sam Mayo (sammayo888@gmail.com)\\n *\\n * @dev Library for verifing merkle patricia proofs.\\n */\\npragma solidity 0.6.8;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0x6d9f0b2aa21529b58a4c6b6ca3caad1550cdaf0dcadd7babae5d88d696d8b9ad\"},\"contracts/root/lib/RLPReader.sol\":{\"content\":\"/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n * https://github.com/hamdiallam/Solidity-RLP/blob/e681e25a376dbd5426b509380bc03446f05d0f97/contracts/RLPReader.sol\\n */\\npragma solidity 0.6.8;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n\\n        return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\",\"keccak256\":\"0xd916833f704a6ba280ea14f2b577ab1653a32293c7eda8e2625fcaeb7e5b2357\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620023d4380380620023d4833981810160405260608110156200003757600080fd5b50805160208201516040909201519091908181620000606000336001600160e01b03620000b116565b6001600160601b0319606083901b166080526001600160a01b0381166200008857306200008a565b805b6001600160601b0319606091821b811660a05295901b90941660c05250620001e992505050565b620000c682826001600160e01b03620000ca16565b5050565b600082815260208181526040909120620000ef918390620007576200014c821b17901c565b15620000c657620001086001600160e01b036200017516565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200016c836001600160a01b0384166001600160e01b036200017916565b90505b92915050565b3390565b60006200019083836001600160e01b03620001d116565b620001c8575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200016f565b5060006200016f565b60009081526001919091016020526040902054151590565b60805160601c60a05160601c60c05160601c6121a66200022e600039806104b652806106325250806104ef5280610a6452508061055d52806116a052506121a66000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80639010d07c116100a2578063ca15c87311610071578063ca15c87314610265578063d547741f14610282578063ddeae033146102ae578063e3d670d7146102d4578063f953cec7146102fa5761010b565b80639010d07c1461020657806391d1485414610229578063a217fddf14610255578063c0857ba01461025d5761010b565b80634e71d92d116100de5780634e71d92d146101a15780635188875b146101a9578063607f2d42146101cd5780636d6aa34d146101fe5761010b565b80630e387de614610110578063248a9ca31461012a5780632f2ff15d1461014757806336568abe14610175575b600080fd5b6101186103a0565b60408051918252519081900360200190f35b6101186004803603602081101561014057600080fd5b50356103c4565b6101736004803603604081101561015d57600080fd5b50803590602001356001600160a01b03166103dc565b005b6101736004803603604081101561018b57600080fd5b50803590602001356001600160a01b0316610448565b6101736104a9565b6101b16104b4565b604080516001600160a01b039092168252519081900360200190f35b6101ea600480360360208110156101e357600080fd5b50356104d8565b604080519115158252519081900360200190f35b6101b16104ed565b6101b16004803603604081101561021c57600080fd5b5080359060200135610511565b6101ea6004803603604081101561023f57600080fd5b50803590602001356001600160a01b0316610538565b610118610556565b6101b161055b565b6101186004803603602081101561027b57600080fd5b503561057f565b6101736004803603604081101561029857600080fd5b50803590602001356001600160a01b0316610596565b610173600480360360208110156102c457600080fd5b50356001600160a01b03166105ef565b610118600480360360208110156102ea57600080fd5b50356001600160a01b031661072f565b6101736004803603602081101561031057600080fd5b81019060208101813564010000000081111561032b57600080fd5b82018360208201111561033d57600080fd5b8035906020019184600183028401116401000000008311171561035f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610741945050505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6000818152602081905260409020600201545b919050565b6000828152602081905260409020600201546103ff906103fa61076c565b610538565b61043a5760405162461bcd60e51b815260040180806020018281038252602f815260200180611f8c602f913960400191505060405180910390fd5b6104448282610770565b5050565b61045061076c565b6001600160a01b0316816001600160a01b03161461049f5760405162461bcd60e51b815260040180806020018281038252602f8152602001806120fa602f913960400191505060405180910390fd5b61044482826107df565b6104b2336105ef565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082815260208190526040812061052f908363ffffffff61084e16565b90505b92915050565b600082815260208190526040812061052f908363ffffffff61085a16565b600081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008181526020819052604081206105329061086f565b6000828152602081905260409020600201546105b4906103fa61076c565b61049f5760405162461bcd60e51b8152600401808060200182810382526030815260200180611fe36030913960400191505060405180910390fd5b6001600160a01b038082166000818152600360209081526040808320805490849055815163a9059cbb60e01b8152600481019590955260248501819052905190947f0000000000000000000000000000000000000000000000000000000000000000169363a9059cbb9360448083019493928390030190829087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050506040513d60208110156106a157600080fd5b50516106ec576040805162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015290519081900360640190fd5b6040805182815290516001600160a01b038416917f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4919081900360200190a25050565b60036020526000908152604090205481565b606061074c8261087a565b905061044481610d54565b600061052f836001600160a01b038416610d60565b3390565b600082815260208190526040902061078e908263ffffffff61075716565b156104445761079b61076c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206107fd908263ffffffff610daa16565b156104445761080a61076c565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061052f8383610dbf565b600061052f836001600160a01b038416610e23565b600061053282610e3b565b60608061088e61088984610e3f565b610eba565b905060006108af826002815181106108a257fe5b602002602001015161103c565b6108d46108cf846008815181106108c257fe5b6020026020010151611184565b61124e565b6108e4846009815181106108a257fe5b6040516020018084815260200183805190602001908083835b6020831061091c5780518252601f1990920191602091820191016108fd565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152938201815283519382019390932060008181526002909252929020549194505060ff161591506109a890505760405162461bcd60e51b81526004018080602001828103825260228152602001806120626022913960400191505060405180910390fd5b6000818152600260205260409020805460ff1916600117905581516060906109e490610889906109df90869060069081106108c257fe5b610e3f565b90506109ee611f2a565b610a0b826003815181106109fe57fe5b6020026020010151610eba565b610a1b856009815181106108a257fe5b81518110610a2557fe5b602002602001015190506060610a3a82610eba565b9050610a5981600081518110610a4c57fe5b60200260200101516113c1565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ade576040805162461bcd60e51b815260206004820181905260248201527f526f6f7454756e6e656c3a20494e56414c49445f4348494c445f54554e4e454c604482015290519081900360640190fd5b610b26610af1866006815181106108c257fe5b610b01876008815181106108c257fe5b610b11886007815181106108c257fe5b610b21896005815181106108a257fe5b611451565b610b615760405162461bcd60e51b81526004018080602001828103825260218152602001806120846021913960400191505060405180910390fd5b610bcf610b74866002815181106108a257fe5b610b84876003815181106108a257fe5b610b94886004815181106108a257fe5b60001b610ba7896005815181106108a257fe5b60001b610bba8a6000815181106108a257fe5b610bca8b6001815181106108c257fe5b611698565b506060610be2826001815181106109fe57fe5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610c18826000815181106108a257fe5b14610c6a576040805162461bcd60e51b815260206004820152601d60248201527f526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245000000604482015290519081900360640190fd5b6060610c7c836002815181106108c257fe5b90506060818060200190516020811015610c9557600080fd5b8101908080516040519392919084640100000000821115610cb557600080fd5b908301906020820185811115610cca57600080fd5b8251640100000000811182820188101715610ce457600080fd5b82525081516020918201929091019080838360005b83811015610d11578181015183820152602001610cf9565b50505050905090810190601f168015610d3e5780820380516001836020036101000a031916815260200191505b5060405250919c9b505050505050505050505050565b610d5d816117f9565b50565b6000610d6c8383610e23565b610da257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610532565b506000610532565b600061052f836001600160a01b038416611857565b81546000908210610e015760405162461bcd60e51b8152600401808060200182810382526022815260200180611f456022913960400191505060405180910390fd5b826000018281548110610e1057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b610e47611f2a565b6000825111610e9d576040805162461bcd60e51b815260206004820152601f60248201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604482015290519081900360640190fd5b506040805180820190915281518152602082810190820152919050565b6060610ec58261191d565b610f16576040805162461bcd60e51b815260206004820152601860248201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604482015290519081900360640190fd5b6000610f2183611949565b905060608167ffffffffffffffff81118015610f3c57600080fd5b50604051908082528060200260200182016040528015610f7657816020015b610f63611f2a565b815260200190600190039081610f5b5790505b5090506000610f8885602001516119d5565b85519091508114610fca5760405162461bcd60e51b81526004018080602001828103825260278152602001806120a56027913960400191505060405180910390fd5b6000610fd98660200151611a6e565b60208701510190506000805b8581101561103057610ff6836119d5565b915060405180604001604052808381526020018481525085828151811061101957fe5b602090810291909101015291810191600101610fe5565b50929695505050505050565b60006110478261191d565b15611099576040805162461bcd60e51b815260206004820181905260248201527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604482015290519081900360640190fd5b8151602110156110f0576040805162461bcd60e51b815260206004820152601e60248201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604482015290519081900360640190fd5b60006110ff83602001516119d5565b835190915081146111415760405162461bcd60e51b81526004018080602001828103825260278152602001806121296027913960400191505060405180910390fd5b60006111508460200151611a6e565b8451602080870151830180519394509184900392919083101561117a57826020036101000a820491505b5095945050505050565b6060600061119583602001516119d5565b835190915081146111d75760405162461bcd60e51b8152600401808060200182810382526028815260200180611fbb6028913960400191505060405180910390fd5b60006111e68460200151611a6e565b845190915081900360608167ffffffffffffffff8111801561120757600080fd5b506040519080825280601f01601f191660200182016040528015611232576020820181803683370190505b509050600081602001905061117a848860200151018285611ad1565b6040805160208101909152600081528151606091901561053257600080611276600086611b1c565b60f81c9050600181148061128d57508060ff166003145b1561131c57600185516002020367ffffffffffffffff811180156112b057600080fd5b506040519080825280601f01601f1916602001820160405280156112db576020820181803683370190505b50925060006112eb600187611b1c565b905080846000815181106112fb57fe5b60200101906001600160f81b031916908160001a905350600192505061136d565b600285516002020367ffffffffffffffff8111801561133a57600080fd5b506040519080825280601f01601f191660200182016040528015611365576020820181803683370190505b509250600091505b60ff82165b83518110156113b85761138d8360ff16820360020187611b1c565b84828151811061139957fe5b60200101906001600160f81b031916908160001a905350600101611372565b50505092915050565b60006113cc8261191d565b156114085760405162461bcd60e51b815260040180806020018281038252602381526020018061203f6023913960400191505060405180910390fd5b81516015146114485760405162461bcd60e51b81526004018080602001828103825260218152602001806121506021913960400191505060405180910390fd5b6105328261103c565b600061145b611f2a565b61146484610e3f565b9050606061147182610eba565b9050606080856000826114838b61124e565b905080516000141561149f576000975050505050505050611690565b60005b86518110156116875781518311156114c557600098505050505050505050611690565b6114e18782815181106114d457fe5b6020026020010151611b79565b95508580519060200120841461150257600098505050505050505050611690565b6115118782815181106109fe57fe5b94508451601114156115ce57815183141561156d578c8051906020012061153e866010815181106108c257fe5b80519060200120141561155c57600198505050505050505050611690565b600098505050505050505050611690565b600082848151811061157b57fe5b016020015160f81c905060108111156115a05760009950505050505050505050611690565b6115bf868260ff16815181106115b257fe5b6020026020010151611be0565b9450506001929092019161167f565b84516002141561155c5760006115f46115ed876000815181106108c257fe5b8486611c7f565b90508251818501141561164a578d80519060200120611619876001815181106108c257fe5b8051906020012014156116385760019950505050505050505050611690565b60009950505050505050505050611690565b806116615760009950505050505050505050611690565b8084019350611676866001815181106115b257fe5b945061167f9050565b6001016114a2565b50505050505050505b949350505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341539d4a876040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b15801561170257600080fd5b505afa158015611716573d6000803e3d6000fd5b505050506040513d60a081101561172c57600080fd5b5080516020820151606090920151909450909250905061179b6117558b8463ffffffff611d5e16565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a0909201909252805191012090858863ffffffff611dbb16565b6117ec576040805162461bcd60e51b815260206004820152601a60248201527f526f6f7454756e6e656c3a20494e56414c49445f484541444552000000000000604482015290519081900360640190fd5b9998505050505050505050565b60205b81518111610444578181015160008061181483611f11565b6001600160a01b03909116600090815260036020908152604090912080546bffffffffffffffffffffffff909316929092019091559390930192506117fc915050565b60008181526001830160205260408120548015611913578354600019808301919081019060009087908390811061188a57fe5b90600052602060002001549050808760000184815481106118a757fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806118d757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610532565b6000915050610532565b6020810151805160009190821a9060c082101561193f576000925050506103d7565b5060019392505050565b60008060009050600061195f8460200151611a6e565b602085015185519181019250015b808210156119cc5761197e826119d5565b82019150808211156119c15760405162461bcd60e51b815260040180806020018281038252602c815260200180612013602c913960400191505060405180910390fd5b60019092019161196d565b50909392505050565b80516000908190811a60808110156119f05760019150611a67565b60b8811015611a0557607e1981019150611a67565b60c0811015611a325760b78103600185019450806020036101000a85510460018201810193505050611a67565b60f8811015611a475760be1981019150611a67565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a6080811015611a885760009150506103d7565b60b8811080611aa3575060c08110801590611aa3575060f881105b15611ab25760019150506103d7565b60c0811015611ac65760b5190190506103d7565b60f5190190506103d7565b80611adb57611b17565b5b60208110611afb578251825260209283019290910190601f1901611adc565b8251825160208390036101000a60001901801990921691161782525b505050565b60006002830615611b4d576010826002850481518110611b3857fe5b016020015160f81c81611b4757fe5b06611b6f565b6010826002850481518110611b5e57fe5b016020015160f81c81611b6d57fe5b045b60f81b9392505050565b606080826000015167ffffffffffffffff81118015611b9757600080fd5b506040519080825280601f01601f191660200182016040528015611bc2576020820181803683370190505b5090506000816020019050611a678460200151828660000151611ad1565b600080611bf083602001516119d5565b83519091508114611c325760405162461bcd60e51b815260040180806020018281038252602e8152602001806120cc602e913960400191505060405180910390fd5b8251602114611c725760405162461bcd60e51b8152600401808060200182810382526025815260200180611f676025913960400191505060405180910390fd5b5050602001516001015190565b6000806060611c8d8661124e565b90506060815167ffffffffffffffff81118015611ca957600080fd5b506040519080825280601f01601f191660200182016040528015611cd4576020820181803683370190505b509050845b82518601811015611d2e576000878281518110611cf257fe5b602001015160f81c60f81b9050808388840381518110611d0e57fe5b60200101906001600160f81b031916908160001a90535050600101611cd9565b50808051906020012082805190602001201415611d4e5781519250611d53565b600092505b509095945050505050565b600082821115611db5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006020825181611dc857fe5b0615611e12576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015290519081900360640190fd5b60006020835181611e1f57fe5b0490508060020a8510611e71576040805162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b604482015290519081900360640190fd5b60008660205b85518111611f035785810151925060028806611ec35781836040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209150611ef5565b828260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b600288049750602001611e77565b509094149695505050505050565b606081901c916bffffffffffffffffffffffff90911690565b60405180604001604052806000815260200160008152509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c454e475448416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f4d49534d41544348416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e4754485f4d49534d41544348524c505265616465723a204445434f44494e475f4c4953545f41535f41444452455353526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434553534544526f6f7454756e6e656c3a20494e56414c49445f524543454950545f50524f4f46524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d49534d41544348524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c454e4754485f4d49534d41544348416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d49534d41544348524c505265616465723a20494e56414c49445f414444524553535f4c454e475448a2646970667358221220e9fd89192c4d93448c18f8cb72de978b4d83fe3962da814e7a84a7683bff148464736f6c63430006080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80639010d07c116100a2578063ca15c87311610071578063ca15c87314610265578063d547741f14610282578063ddeae033146102ae578063e3d670d7146102d4578063f953cec7146102fa5761010b565b80639010d07c1461020657806391d1485414610229578063a217fddf14610255578063c0857ba01461025d5761010b565b80634e71d92d116100de5780634e71d92d146101a15780635188875b146101a9578063607f2d42146101cd5780636d6aa34d146101fe5761010b565b80630e387de614610110578063248a9ca31461012a5780632f2ff15d1461014757806336568abe14610175575b600080fd5b6101186103a0565b60408051918252519081900360200190f35b6101186004803603602081101561014057600080fd5b50356103c4565b6101736004803603604081101561015d57600080fd5b50803590602001356001600160a01b03166103dc565b005b6101736004803603604081101561018b57600080fd5b50803590602001356001600160a01b0316610448565b6101736104a9565b6101b16104b4565b604080516001600160a01b039092168252519081900360200190f35b6101ea600480360360208110156101e357600080fd5b50356104d8565b604080519115158252519081900360200190f35b6101b16104ed565b6101b16004803603604081101561021c57600080fd5b5080359060200135610511565b6101ea6004803603604081101561023f57600080fd5b50803590602001356001600160a01b0316610538565b610118610556565b6101b161055b565b6101186004803603602081101561027b57600080fd5b503561057f565b6101736004803603604081101561029857600080fd5b50803590602001356001600160a01b0316610596565b610173600480360360208110156102c457600080fd5b50356001600160a01b03166105ef565b610118600480360360208110156102ea57600080fd5b50356001600160a01b031661072f565b6101736004803603602081101561031057600080fd5b81019060208101813564010000000081111561032b57600080fd5b82018360208201111561033d57600080fd5b8035906020019184600183028401116401000000008311171561035f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610741945050505050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6000818152602081905260409020600201545b919050565b6000828152602081905260409020600201546103ff906103fa61076c565b610538565b61043a5760405162461bcd60e51b815260040180806020018281038252602f815260200180611f8c602f913960400191505060405180910390fd5b6104448282610770565b5050565b61045061076c565b6001600160a01b0316816001600160a01b03161461049f5760405162461bcd60e51b815260040180806020018281038252602f8152602001806120fa602f913960400191505060405180910390fd5b61044482826107df565b6104b2336105ef565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082815260208190526040812061052f908363ffffffff61084e16565b90505b92915050565b600082815260208190526040812061052f908363ffffffff61085a16565b600081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008181526020819052604081206105329061086f565b6000828152602081905260409020600201546105b4906103fa61076c565b61049f5760405162461bcd60e51b8152600401808060200182810382526030815260200180611fe36030913960400191505060405180910390fd5b6001600160a01b038082166000818152600360209081526040808320805490849055815163a9059cbb60e01b8152600481019590955260248501819052905190947f0000000000000000000000000000000000000000000000000000000000000000169363a9059cbb9360448083019493928390030190829087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050506040513d60208110156106a157600080fd5b50516106ec576040805162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015290519081900360640190fd5b6040805182815290516001600160a01b038416917f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4919081900360200190a25050565b60036020526000908152604090205481565b606061074c8261087a565b905061044481610d54565b600061052f836001600160a01b038416610d60565b3390565b600082815260208190526040902061078e908263ffffffff61075716565b156104445761079b61076c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206107fd908263ffffffff610daa16565b156104445761080a61076c565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061052f8383610dbf565b600061052f836001600160a01b038416610e23565b600061053282610e3b565b60608061088e61088984610e3f565b610eba565b905060006108af826002815181106108a257fe5b602002602001015161103c565b6108d46108cf846008815181106108c257fe5b6020026020010151611184565b61124e565b6108e4846009815181106108a257fe5b6040516020018084815260200183805190602001908083835b6020831061091c5780518252601f1990920191602091820191016108fd565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152938201815283519382019390932060008181526002909252929020549194505060ff161591506109a890505760405162461bcd60e51b81526004018080602001828103825260228152602001806120626022913960400191505060405180910390fd5b6000818152600260205260409020805460ff1916600117905581516060906109e490610889906109df90869060069081106108c257fe5b610e3f565b90506109ee611f2a565b610a0b826003815181106109fe57fe5b6020026020010151610eba565b610a1b856009815181106108a257fe5b81518110610a2557fe5b602002602001015190506060610a3a82610eba565b9050610a5981600081518110610a4c57fe5b60200260200101516113c1565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ade576040805162461bcd60e51b815260206004820181905260248201527f526f6f7454756e6e656c3a20494e56414c49445f4348494c445f54554e4e454c604482015290519081900360640190fd5b610b26610af1866006815181106108c257fe5b610b01876008815181106108c257fe5b610b11886007815181106108c257fe5b610b21896005815181106108a257fe5b611451565b610b615760405162461bcd60e51b81526004018080602001828103825260218152602001806120846021913960400191505060405180910390fd5b610bcf610b74866002815181106108a257fe5b610b84876003815181106108a257fe5b610b94886004815181106108a257fe5b60001b610ba7896005815181106108a257fe5b60001b610bba8a6000815181106108a257fe5b610bca8b6001815181106108c257fe5b611698565b506060610be2826001815181106109fe57fe5b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610c18826000815181106108a257fe5b14610c6a576040805162461bcd60e51b815260206004820152601d60248201527f526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245000000604482015290519081900360640190fd5b6060610c7c836002815181106108c257fe5b90506060818060200190516020811015610c9557600080fd5b8101908080516040519392919084640100000000821115610cb557600080fd5b908301906020820185811115610cca57600080fd5b8251640100000000811182820188101715610ce457600080fd5b82525081516020918201929091019080838360005b83811015610d11578181015183820152602001610cf9565b50505050905090810190601f168015610d3e5780820380516001836020036101000a031916815260200191505b5060405250919c9b505050505050505050505050565b610d5d816117f9565b50565b6000610d6c8383610e23565b610da257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610532565b506000610532565b600061052f836001600160a01b038416611857565b81546000908210610e015760405162461bcd60e51b8152600401808060200182810382526022815260200180611f456022913960400191505060405180910390fd5b826000018281548110610e1057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b610e47611f2a565b6000825111610e9d576040805162461bcd60e51b815260206004820152601f60248201527f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800604482015290519081900360640190fd5b506040805180820190915281518152602082810190820152919050565b6060610ec58261191d565b610f16576040805162461bcd60e51b815260206004820152601860248201527f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000604482015290519081900360640190fd5b6000610f2183611949565b905060608167ffffffffffffffff81118015610f3c57600080fd5b50604051908082528060200260200182016040528015610f7657816020015b610f63611f2a565b815260200190600190039081610f5b5790505b5090506000610f8885602001516119d5565b85519091508114610fca5760405162461bcd60e51b81526004018080602001828103825260278152602001806120a56027913960400191505060405180910390fd5b6000610fd98660200151611a6e565b60208701510190506000805b8581101561103057610ff6836119d5565b915060405180604001604052808381526020018481525085828151811061101957fe5b602090810291909101015291810191600101610fe5565b50929695505050505050565b60006110478261191d565b15611099576040805162461bcd60e51b815260206004820181905260248201527f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54604482015290519081900360640190fd5b8151602110156110f0576040805162461bcd60e51b815260206004820152601e60248201527f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000604482015290519081900360640190fd5b60006110ff83602001516119d5565b835190915081146111415760405162461bcd60e51b81526004018080602001828103825260278152602001806121296027913960400191505060405180910390fd5b60006111508460200151611a6e565b8451602080870151830180519394509184900392919083101561117a57826020036101000a820491505b5095945050505050565b6060600061119583602001516119d5565b835190915081146111d75760405162461bcd60e51b8152600401808060200182810382526028815260200180611fbb6028913960400191505060405180910390fd5b60006111e68460200151611a6e565b845190915081900360608167ffffffffffffffff8111801561120757600080fd5b506040519080825280601f01601f191660200182016040528015611232576020820181803683370190505b509050600081602001905061117a848860200151018285611ad1565b6040805160208101909152600081528151606091901561053257600080611276600086611b1c565b60f81c9050600181148061128d57508060ff166003145b1561131c57600185516002020367ffffffffffffffff811180156112b057600080fd5b506040519080825280601f01601f1916602001820160405280156112db576020820181803683370190505b50925060006112eb600187611b1c565b905080846000815181106112fb57fe5b60200101906001600160f81b031916908160001a905350600192505061136d565b600285516002020367ffffffffffffffff8111801561133a57600080fd5b506040519080825280601f01601f191660200182016040528015611365576020820181803683370190505b509250600091505b60ff82165b83518110156113b85761138d8360ff16820360020187611b1c565b84828151811061139957fe5b60200101906001600160f81b031916908160001a905350600101611372565b50505092915050565b60006113cc8261191d565b156114085760405162461bcd60e51b815260040180806020018281038252602381526020018061203f6023913960400191505060405180910390fd5b81516015146114485760405162461bcd60e51b81526004018080602001828103825260218152602001806121506021913960400191505060405180910390fd5b6105328261103c565b600061145b611f2a565b61146484610e3f565b9050606061147182610eba565b9050606080856000826114838b61124e565b905080516000141561149f576000975050505050505050611690565b60005b86518110156116875781518311156114c557600098505050505050505050611690565b6114e18782815181106114d457fe5b6020026020010151611b79565b95508580519060200120841461150257600098505050505050505050611690565b6115118782815181106109fe57fe5b94508451601114156115ce57815183141561156d578c8051906020012061153e866010815181106108c257fe5b80519060200120141561155c57600198505050505050505050611690565b600098505050505050505050611690565b600082848151811061157b57fe5b016020015160f81c905060108111156115a05760009950505050505050505050611690565b6115bf868260ff16815181106115b257fe5b6020026020010151611be0565b9450506001929092019161167f565b84516002141561155c5760006115f46115ed876000815181106108c257fe5b8486611c7f565b90508251818501141561164a578d80519060200120611619876001815181106108c257fe5b8051906020012014156116385760019950505050505050505050611690565b60009950505050505050505050611690565b806116615760009950505050505050505050611690565b8084019350611676866001815181106115b257fe5b945061167f9050565b6001016114a2565b50505050505050505b949350505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341539d4a876040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b15801561170257600080fd5b505afa158015611716573d6000803e3d6000fd5b505050506040513d60a081101561172c57600080fd5b5080516020820151606090920151909450909250905061179b6117558b8463ffffffff611d5e16565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a0909201909252805191012090858863ffffffff611dbb16565b6117ec576040805162461bcd60e51b815260206004820152601a60248201527f526f6f7454756e6e656c3a20494e56414c49445f484541444552000000000000604482015290519081900360640190fd5b9998505050505050505050565b60205b81518111610444578181015160008061181483611f11565b6001600160a01b03909116600090815260036020908152604090912080546bffffffffffffffffffffffff909316929092019091559390930192506117fc915050565b60008181526001830160205260408120548015611913578354600019808301919081019060009087908390811061188a57fe5b90600052602060002001549050808760000184815481106118a757fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806118d757fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610532565b6000915050610532565b6020810151805160009190821a9060c082101561193f576000925050506103d7565b5060019392505050565b60008060009050600061195f8460200151611a6e565b602085015185519181019250015b808210156119cc5761197e826119d5565b82019150808211156119c15760405162461bcd60e51b815260040180806020018281038252602c815260200180612013602c913960400191505060405180910390fd5b60019092019161196d565b50909392505050565b80516000908190811a60808110156119f05760019150611a67565b60b8811015611a0557607e1981019150611a67565b60c0811015611a325760b78103600185019450806020036101000a85510460018201810193505050611a67565b60f8811015611a475760be1981019150611a67565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b8051600090811a6080811015611a885760009150506103d7565b60b8811080611aa3575060c08110801590611aa3575060f881105b15611ab25760019150506103d7565b60c0811015611ac65760b5190190506103d7565b60f5190190506103d7565b80611adb57611b17565b5b60208110611afb578251825260209283019290910190601f1901611adc565b8251825160208390036101000a60001901801990921691161782525b505050565b60006002830615611b4d576010826002850481518110611b3857fe5b016020015160f81c81611b4757fe5b06611b6f565b6010826002850481518110611b5e57fe5b016020015160f81c81611b6d57fe5b045b60f81b9392505050565b606080826000015167ffffffffffffffff81118015611b9757600080fd5b506040519080825280601f01601f191660200182016040528015611bc2576020820181803683370190505b5090506000816020019050611a678460200151828660000151611ad1565b600080611bf083602001516119d5565b83519091508114611c325760405162461bcd60e51b815260040180806020018281038252602e8152602001806120cc602e913960400191505060405180910390fd5b8251602114611c725760405162461bcd60e51b8152600401808060200182810382526025815260200180611f676025913960400191505060405180910390fd5b5050602001516001015190565b6000806060611c8d8661124e565b90506060815167ffffffffffffffff81118015611ca957600080fd5b506040519080825280601f01601f191660200182016040528015611cd4576020820181803683370190505b509050845b82518601811015611d2e576000878281518110611cf257fe5b602001015160f81c60f81b9050808388840381518110611d0e57fe5b60200101906001600160f81b031916908160001a90535050600101611cd9565b50808051906020012082805190602001201415611d4e5781519250611d53565b600092505b509095945050505050565b600082821115611db5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006020825181611dc857fe5b0615611e12576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015290519081900360640190fd5b60006020835181611e1f57fe5b0490508060020a8510611e71576040805162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b604482015290519081900360640190fd5b60008660205b85518111611f035785810151925060028806611ec35781836040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209150611ef5565b828260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b600288049750602001611e77565b509094149695505050505050565b606081901c916bffffffffffffffffffffffff90911690565b60405180604001604052806000815260200160008152509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c454e475448416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f4d49534d41544348416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e4754485f4d49534d41544348524c505265616465723a204445434f44494e475f4c4953545f41535f41444452455353526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434553534544526f6f7454756e6e656c3a20494e56414c49445f524543454950545f50524f4f46524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d49534d41544348524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c454e4754485f4d49534d41544348416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d49534d41544348524c505265616465723a20494e56414c49445f414444524553535f4c454e475448a2646970667358221220e9fd89192c4d93448c18f8cb72de978b4d83fe3962da814e7a84a7683bff148464736f6c63430006080033",
  "devdoc": {
    "methods": {
      "claimFor(address)": {
        "params": {
          "recipient": "- the address of the recipient for which to claim"
        }
      },
      "constructor": {
        "details": "constructor argument _childTunnel is needed for testing. In a production deploy this should be set to zero     RootWithdrawalBatcherTunnel will then only accept messages from the a contract on the child chain at the same address as itself",
        "params": {
          "_checkpointManager": "- ERC20 token which this contract distributes",
          "_childTunnel": "- address of contract which this contract accepts messages from. Set to 0 in a production deploy.",
          "_withdrawalToken": "- ERC20 token which this contract distributes"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields 0 - headerNumber - Checkpoint header block number containing the reference tx 1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root 2 - blockNumber - Block number containing the reference tx on child chain 3 - blockTime - Reference tx block time 4 - txRoot - Transactions root of block 5 - receiptRoot - Receipts root of block 6 - receipt - Receipt of the reference transaction 7 - receiptProof - Merkle proof of the reference receipt 8 - branchMask - 32 bits denoting the path of receipt in merkle tree 9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      }
    }
  },
  "userdoc": {
    "methods": {
      "claim()": {
        "notice": "Claim caller's balance, sending the tokens to their address"
      },
      "claimFor(address)": {
        "notice": "Claim a recipient's balance for them, sending the tokens to their address"
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from L2 to L1, validated by proof"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 2739,
        "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
        "label": "_revertMsg",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3097,
        "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
        "label": "processedExits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2938,
        "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
        "label": "balance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2026_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2025,
            "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1761_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2026_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1761_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1756,
            "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1760,
            "contract": "contracts/root/RootWithdrawalBatcher.sol:RootWithdrawalBatcher",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}